<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:rdb="http://www.dangdang.com/schema/ddframe/rdb"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.dangdang.com/schema/ddframe/rdb http://www.dangdang.com/schema/ddframe/rdb/rdb.xsd">
    <!-- ==================== -->
    <!--       Bean加载       -->
    <!-- ==================== -->
    <context:component-scan base-package="com.company.db.*" use-default-filters="true">
    </context:component-scan>
    <!-- ==================== -->
    <!--    Properties加载    -->
    <!-- ==================== -->
    <util:properties id="db" location="classpath:sharding/db-sharding.properties"/>

    <!-- ==================== -->
    <!--       数据源配置      -->
    <!-- ==================== -->
    <bean id="ds" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="username" value="#{db['ds.druid.username']}"/>
        <property name="password" value="#{db['ds.druid.password']}"/>
        <property name="url" value="#{db['ds.druid.url']}"/>
    </bean>
    <bean id="ds_0" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="username" value="#{db['ds_0.druid.username']}"/>
        <property name="password" value="#{db['ds_0.druid.password']}"/>
        <property name="url" value="#{db['ds_0.druid.url']}"/>
    </bean>
    <bean id="ds_1" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="username" value="#{db['ds_1.druid.username']}"/>
        <property name="password" value="#{db['ds_1.druid.password']}"/>
        <property name="url" value="#{db['ds_1.druid.url']}"/>
    </bean>

    <rdb:strategy id="orderTableStrategy" sharding-columns="user_id" algorithm-class="com.company.db.ShardingAlgorithm"/>
    <rdb:data-source id="shardingDataSource">
        <rdb:sharding-rule data-sources="ds">
            <rdb:table-rules>
                <rdb:table-rule logic-table="t_order" actual-tables="t_order_${0..2}" table-strategy="orderTableStrategy"/>
            </rdb:table-rules>
            <rdb:binding-table-rules>
                <rdb:binding-table-rule logic-tables="t_order"/>
            </rdb:binding-table-rules>
        </rdb:sharding-rule>
    </rdb:data-source>


    <!--&lt;!&ndash; 分库算法 &ndash;&gt;
    <bean id="noneDatabaseShardingAlgorithm" class="com.dangdang.ddframe.rdb.sharding.api.strategy.database.NoneDatabaseShardingAlgorithm"/>
    &lt;!&ndash; 分库策略 &ndash;&gt;
    <bean id="databaseStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.database.DatabaseShardingStrategy">
        <constructor-arg index="0" value="user_id" />
        <constructor-arg index="1" ref="noneDatabaseShardingAlgorithm" />
     </bean>
    &lt;!&ndash;<rdb:strategy id="databaseStrategy" sharding-columns="user_id" algorithm-expression="dbtbl_${user_id.longValue() % 2}"/>&ndash;&gt;
    &lt;!&ndash; 分表算法 &ndash;&gt;
    &lt;!&ndash; 分表策略 &ndash;&gt;
    <bean id="tableStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.table.TableShardingStrategy">
        <constructor-arg index="0" value="order_id"></constructor-arg>
        <constructor-arg index="1" ref=""></constructor-arg>
    </bean>
    &lt;!&ndash;<rdb:strategy id="orderTableStrategy" sharding-columns="order_id" algorithm-expression="t_order_${order_id.longValue() % 4}"/>&ndash;&gt;
    <rdb:strategy id="orderItemTableStrategy" sharding-columns="order_id" algorithm-class="com.dangdang.ddframe.rdb.sharding.example.config.spring.algorithm.SingleKeyModuloTableShardingAlgorithm"/>

    <rdb:data-source id="shardingDataSource">
        <rdb:sharding-rule data-sources="ds_0,ds_1">
            <rdb:table-rules>
                <rdb:table-rule logic-table="t_order" actual-tables="t_order_${0..3}" database-strategy="databaseStrategy" table-strategy="orderTableStrategy"/>
                <rdb:table-rule logic-table="t_order_item" actual-tables="t_order_item_0,t_order_item_1,t_order_item_2,t_order_item_3" database-strategy="databaseStrategy" table-strategy="orderItemTableStrategy"/>
            </rdb:table-rules>
        </rdb:sharding-rule>
    </rdb:data-source>
    <bean id="shardingRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.ShardingRule">
        <constructor-arg index="0" ref="" />
        <constructor-arg index="1" ref="" />
        <constructor-arg index="2" ref="" />
        <constructor-arg index="3" ref="" />
        <constructor-arg index="4" ref="" />
    </bean>
    <bean id="ShardingDataSource" class="com.dangdang.ddframe.rdb.sharding.jdbc.ShardingDataSource">
        <constructor-arg index="0" ref="shardingRule" />
    </bean>-->


    <!-- SessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="shardingDataSource"/>
        <property name="configLocation" value="classpath:mybatis-cfg.xml"/>
    </bean>
    <!-- SqlSessionTemplate -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    <!-- ==================== -->
    <!--       事务配置       -->
    <!-- ==================== -->
    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="shardingDataSource"/>
    </bean>
    <!-- 事务通知 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="get*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
            <!--<tx:method name="*" rollback-for="Exception"/>-->
        </tx:attributes>
    </tx:advice>
     <!-- ==================== -->
    <!--        AOP配置        -->
    <!-- ==================== -->
    <aop:config>
        <!--配置事务切点 -->
        <!-- 关键配置，切换数据源一定要比持久层代码更先执行（事务也算持久层代码） -->
        <aop:pointcut id="servicePointcut" expression="execution(* com.company.db.service..*.*(..))"/>
        <aop:advisor pointcut-ref="servicePointcut" advice-ref="transactionAdvice"/>
    </aop:config>
</beans>